<?xml version="1.0" encoding="UTF-8"?>

<project name="gdata-scala-client" default="build" basedir=".">

  <property environment="env"/>

  <!-- Prevents system classpath from being used -->
  <property name="build.sysclasspath" value="ignore"/>

  <!-- PROPERTIES -->

  <property name="source.dir"   value="src"/>
  <property name="tests.dir"    value="tests"/>
	<property name="testdata.dir" value="test-data"/>
  <property name="samples.dir"  value="samples"/>
  <property name="lib.dir"      value="lib"/>
  <property name="junit.jar"    value="${lib.dir}/junit-4.4.jar"/>
  <property name="xmldiff.jar"  value="${lib.dir}/xmldiff-0.3.jar"/>
  <property file="./build.properties"/>

  <!-- the following properties can be set in the above property file -->
  <property name="scala.dir" value="${env.SCALA_HOME}"/>
  <property name="build.dir" value="classes"/>
	<property name="instr.dir" location="classes-instr"/>
  <property name="docs.dir" value="docs/api"/>
	<property name="dists.dir" value="dists"/>
	<property name="version" value="0.2"/>

  <property name="coverage.dir" value="coverage"/>
  <!--  directory that contains emma.jar and emma_ant.jar: -->
  <available property="emma.available" file="${emma.dir}" type="dir"/>
	
  <!-- path element used by EMMA taskdef below: -->
  <property name="instrument" value="false"/>
  
  <path id="emma.lib">
    <pathelement location="${emma.dir}/emma.jar"/>
    <pathelement location="${emma.dir}/emma_ant.jar"/>
  </path>

  <!-- this loads <emma> and <emmajava> custom tasks: -->
  <target name="emma_init" if="emma.available">
    <taskdef resource="emma_ant.properties" classpathref="emma.lib"/>
  </target>
  
  <!--
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
  -->
  
  <!-- INITIALISATION -->

  <target name="init">
    <available file="${scala.dir}" property="scala.present"/>
    <fail
      message="Installed Scala distribution could not be found."
      unless="scala.present"
    />
    <property name="scala-library.jar" value="${scala.dir}/lib/scala-library.jar"/>
    <property name="scala-compiler.jar" value="${scala.dir}/lib/scala-compiler.jar"/>
    <fail message="Scala library '${scala-library.jar}' is not available">
      <condition><not><and>
        <available classname="scala.Predef"
                   classpath="${scala-library.jar}"/>
        <available classname="scala.collection.immutable.List"
                   classpath="${scala-library.jar}"/>
      </and></not></condition>
    </fail>
    <fail message="Scala library '${scala-compiler.jar}' is not available">
      <condition><not><and>
        <available classname="scala.tools.ant.Scalac"
                   classpath="${scala-compiler.jar}:${scala-library.jar}"/>
        <available classname="scala.tools.nsc.Main"
                   classpath="${scala-compiler.jar}:${scala-library.jar}"/>
      </and></not></condition>
    </fail>
    <path id="scala.classpath">
      <pathelement location="${scala-library.jar}"/>
      <pathelement location="${scala-compiler.jar}"/>
    </path>
    <taskdef resource="scala/tools/ant/antlib.xml">
      <classpath>
        <path refid="scala.classpath"/>
      </classpath>
    </taskdef>
    <path id="build.classpath">
      <pathelement location="${scala-library.jar}"/>
      <pathelement location="${build.dir}"/>
    </path>
    <path id="test.classpath">
      <pathelement location="${scala-library.jar}"/>
      <pathelement location="${build.dir}"/>
      <pathelement location="${junit.jar}"/>
    	<pathelement location="${xmldiff.jar}"/>
      <pathelement location="${testdata.dir}"/>
      <pathelement location="${emma.dir}/emma.jar"/>
    </path>
  </target>

  <!-- BUILD -->

  <target name="build.combinators" depends="init">
    <mkdir dir="${build.dir}"/>
    <scalac
      target="jvm-1.5"
    	debuginfo="line"
      srcdir="${source.dir}"
      includes="com/google/xml/**/*.scala"
      destdir="${build.dir}"
      classpathref="build.classpath"/>
  </target>

  <target name="build.samples" depends="init,build"
  	description="Build sample applications.">
    <echo level="verbose" message="build.dir=${build.dir}"/>
    <mkdir dir="${build.dir}"/>
    <scalac
      target="jvm-1.5"
      debuginfo="line"
      srcdir="${samples.dir}"
      includes="**/*.scala"
      destdir="${build.dir}"
      classpathref="build.classpath"
    />
  </target>

  <target name="build" depends="init,build.combinators"
  	description="Build project.">
    <echo level="verbose" message="build.dir=${build.dir}"/>
    <mkdir dir="${build.dir}"/>
    <scalac
      target="jvm-1.5"
      debuginfo="line"
      srcdir="${source.dir}"
      includes="**/*.scala"
      destdir="${build.dir}"
      classpathref="build.classpath"
    />
  </target>
	
  <target name="build.test" depends="init,build">
    <echo level="verbose" message="build.dir=${build.dir}"/>
    <scalac
        target="jvm-1.5"
        debuginfo="line"
        srcdir="${tests.dir}"
        includes="**/*.scala"
        destdir="${build.dir}"
        classpathref="test.classpath"
        />
  </target>
  
  <target name="instrument" depends="init, build.test, emma_init" if="emma.available">
  	<mkdir dir="${instr.dir}"/>
    <emma enabled="${emma.available}">
      <instr destdir="${instr.dir}" metadatafile="${coverage.dir}/coverage.emma">
        <instrpath>
          <pathelement path="${build.dir}"/>
        </instrpath>
      </instr>
    </emma>
  </target>
	
  <target name="test" depends="instrument,test.feeds,test.functional"
  	 description="Run all tests, including functional tests.">
    <junit fork="true">
      <test name="com.google.xml.combinators.PicklerTest"/>
      <test name="com.google.xml.combinators.PicklerPermuteTest"/>
      <test name="com.google.xml.combinators.GDataCoreTest"/>
      <test name="com.google.gdata.data.util.DateTimeTest"/>
      <test name="com.google.gdata.data.util.NormalPlayTimeTest"/>
      <test name="com.google.gdata.QueryTest"/>
      <test name="com.google.gdata.data.media.ContentTest"/>
      <formatter type="plain" usefile="false"/>
      <classpath>
        <pathelement location="${instr.dir}"/>
        <path refid="test.classpath"/>
      </classpath> 
      <jvmarg value="-Demma.coverage.out.file=${coverage.dir}/coverage.emma"/>
      <jvmarg value="-Demma.coverage.out.merge=true"/>
    </junit>
  </target>

  <target name="test.feeds" depends="build.test, instrument"
  	description="Run feed tests. They run offline, using saved XML feeds.">
    <junit fork="true">
      <test name="com.google.gdata.youtube.YouTubeFeedsTest"/>
      <test name="com.google.gdata.calendar.CalendarFeedsTest"/>
      <formatter type="plain" usefile="false"/>
      <classpath>
        <pathelement location="${instr.dir}"/>
        <path refid="test.classpath"/>
      </classpath> 
    	<jvmarg value="-Demma.coverage.out.file=${coverage.dir}/coverage.emma"/>
    	<jvmarg value="-Demma.coverage.out.merge=true"/>
    </junit>
  </target>

  <target name="test.functional" depends="build.test, instrument"
  	description="Run functional tests. They require a valid internet connection and may take longer.">
    <junit fork="true">
      <test name="com.google.gdata.calendar.CalendarFunctionalTest"/>
      <formatter type="plain" usefile="false"/>
      <classpath>
        <pathelement location="${instr.dir}"/>
        <path refid="test.classpath"/>
      </classpath> 
      <jvmarg value="-Demma.coverage.out.file=${coverage.dir}/coverage.emma"/>
      <jvmarg value="-Demma.coverage.out.merge=true"/>
    </junit>
  </target>

  <target name="coverage" depends="test"
  	description="Generate HTML reports on test coverage (requires emma).">
  	<fail unless="emma.available" 
  		message="emma not found. Test coverage is not available. 
  		Set the emma.dir property to point to your emma instalation."/>
  	<mkdir dir="${coverage.dir}"/>
    <emma enabled="true">
      <report sourcepath="${source.dir}">
        <fileset dir="${coverage.dir}" >
          <include name="*.emma" />
        </fileset>
        
        <txt outfile="${coverage.dir}/coverage.txt" />
        <html outfile="${coverage.dir}/coverage.html" />			
      </report>
    </emma>
  </target>
	
	<target name="dist" depends="build"
		description="Pack a distribution">
    <echo level="verbose" message="dist.dir=${dists.dir}"/>
    <mkdir dir="${dists.dir}"/>
    <jar basedir="${build.dir}" destfile="${dists.dir}/gdata-scala-client-${version}.jar"/>
    
    <zip destfile="${dists.dir}/gdata-scala-client-${version}-src.zip">
      <fileset dir="." includes="lib/**/*,src/**/*,tests/**/*,test-data/**/*,build.xml,COPYING,README.txt"/>
	</zip>
	</target>
	
  <!-- DOCS -->
  
  <target name="docs" depends="init"
  	description="Build API scaladocs.">
    <mkdir dir="${docs.dir}"/>
    <scaladoc
      srcdir="${source.dir}"
      destdir="${docs.dir}"
      deprecation="yes" unchecked="yes"
      doctitle="GData Scala Client"
      classpathref="build.classpath">
        <include name="**/*.scala"/>
    </scaladoc>
  </target>

  <!-- CLEAN -->

  <macrodef name="remove">
    <attribute name="dir"/>
    <sequential>
      <delete dir="@{dir}" includeemptydirs="yes" quiet="yes" 
      	failonerror="no" defaultexcludes="true"/>
    </sequential>
  </macrodef>

  <target name="clean" description="Remove generated files (except dists directory).">
    <remove dir="${build.dir}"/>
    <remove dir="${docs.dir}"/>
  	<remove dir="${coverage.dir}"/>
  	<remove dir="${instr.dir}"/>
  </target>
	
</project>

